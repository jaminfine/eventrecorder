{
  "className": "qx.ui.progressive.renderer.table.cell.Conditional",
  "packageName": "qx.ui.progressive.renderer.table.cell",
  "name": "Conditional",
  "superClass": "qx.ui.progressive.renderer.table.cell.Abstract",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 24,
        "column": 0
      },
      "end": {
        "line": 460,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp:\n\nCopyright:\n2007 by Tartan Solutions, Inc, http:\n2008 Derrell Lipman\n\nLicense:\nMIT: https:\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nDan Hummon\nDerrell Lipman (derrell)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Table Cell Renderer for Progressive."
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 42,
        "column": 14
      },
      "end": {
        "line": 68,
        "column": 3
      }
    }
  },
  "members": {
    "__numericAllowed": {
      "location": {
        "start": {
          "line": 74,
          "column": 4
        },
        "end": {
          "line": 74,
          "column": 30
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__betweenAllowed": {
      "location": {
        "start": {
          "line": 75,
          "column": 4
        },
        "end": {
          "line": 75,
          "column": 30
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__conditions": {
      "location": {
        "start": {
          "line": 76,
          "column": 4
        },
        "end": {
          "line": 76,
          "column": 30
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__defaultTextAlign": {
      "location": {
        "start": {
          "line": 77,
          "column": 4
        },
        "end": {
          "line": 77,
          "column": 30
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__defaultColor": {
      "location": {
        "start": {
          "line": 78,
          "column": 4
        },
        "end": {
          "line": 78,
          "column": 30
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__defaultFontStyle": {
      "location": {
        "start": {
          "line": 79,
          "column": 4
        },
        "end": {
          "line": 79,
          "column": 30
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__defaultFontWeight": {
      "location": {
        "start": {
          "line": 80,
          "column": 4
        },
        "end": {
          "line": 80,
          "column": 30
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__applyFormatting": {
      "location": {
        "start": {
          "line": 91,
          "column": 4
        },
        "end": {
          "line": 112,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Applies the cell styles to the style map."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "condition {Array}\n  The matched condition",
            "paramName": "condition",
            "description": "\n  The matched condition",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "style {Map}\n  map of already applied styles.",
            "paramName": "style",
            "description": "\n  map of already applied styles.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "addNumericCondition": {
      "location": {
        "start": {
          "line": 152,
          "column": 4
        },
        "end": {
          "line": 171,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The addNumericCondition method is used to add a basic numeric condition\nto the cell renderer.\n\nNote: Passing null is different from passing an empty string in the\nalign, color, style and weight arguments. Null will allow pre-existing\nformatting to pass through, where an empty string will clear it back to\nthe default formatting set in the constructor."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "condition {String}\n  The type of condition. Accepted strings are \"==\", \"!=\", \">\", \"<\",\n  \">=\", and \"<=\".",
            "paramName": "condition",
            "description": "\n  The type of condition. Accepted strings are \"==\", \"!=\", \">\", \"<\",\n  \">=\", and \"<=\".",
            "type": "qx.ui.progressive.renderer.table.cell.String"
          },
          {
            "name": "@param",
            "body": "value1 {Integer}\n  The value to compare against.",
            "paramName": "value1",
            "description": "\n  The value to compare against.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "align {String}\n  The alignment to format the cell with if the condition matches.",
            "paramName": "align",
            "description": "\n  The alignment to format the cell with if the condition matches.",
            "type": "qx.ui.progressive.renderer.table.cell.String"
          },
          {
            "name": "@param",
            "body": "color {String}\n  The color to format the cell with if the condition matches.",
            "paramName": "color",
            "description": "\n  The color to format the cell with if the condition matches.",
            "type": "qx.ui.progressive.renderer.table.cell.String"
          },
          {
            "name": "@param",
            "body": "style {String}\n  The style to format the cell with if the condition matches.",
            "paramName": "style",
            "description": "\n  The style to format the cell with if the condition matches.",
            "type": "qx.ui.progressive.renderer.table.cell.String"
          },
          {
            "name": "@param",
            "body": "weight {String}\n  The weight to format the cell with if the condition matches.",
            "paramName": "weight",
            "description": "\n  The weight to format the cell with if the condition matches.",
            "type": "qx.ui.progressive.renderer.table.cell.String"
          },
          {
            "name": "@param",
            "body": "target {String}\n  The text value of the column to compare against. If this is null,\n  comparisons will be against the contents of this cell.",
            "paramName": "target",
            "description": "\n  The text value of the column to compare against. If this is null,\n  comparisons will be against the contents of this cell.",
            "type": "qx.ui.progressive.renderer.table.cell.String"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the condition can not be recognized or the value\nis null.",
            "type": "Error",
            "description": " If the condition can not be recognized or the value\nis null."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addBetweenCondition": {
      "location": {
        "start": {
          "line": 214,
          "column": 4
        },
        "end": {
          "line": 235,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The addBetweenCondition method is used to add a between condition to\nthe cell renderer.\n\nNote: Passing null is different from passing an empty string in the\nalign, color, style and weight arguments. Null will allow pre-existing\nformatting to pass through, where an empty string will clear it back to\nthe default formatting set in the constructor."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "condition {String}\n  The type of condition. Accepted strings are \"between\" and \"!between\".",
            "paramName": "condition",
            "description": "\n  The type of condition. Accepted strings are \"between\" and \"!between\".",
            "type": "qx.ui.progressive.renderer.table.cell.String"
          },
          {
            "name": "@param",
            "body": "value1 {Integer}\n  The first value to compare against.",
            "paramName": "value1",
            "description": "\n  The first value to compare against.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "value2 {Integer}\n  The second value to compare against.",
            "paramName": "value2",
            "description": "\n  The second value to compare against.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "align {String}\n  The alignment to format the cell with if the condition matches.",
            "paramName": "align",
            "description": "\n  The alignment to format the cell with if the condition matches.",
            "type": "qx.ui.progressive.renderer.table.cell.String"
          },
          {
            "name": "@param",
            "body": "color {String}\n  The color to format the cell with if the condition matches.",
            "paramName": "color",
            "description": "\n  The color to format the cell with if the condition matches.",
            "type": "qx.ui.progressive.renderer.table.cell.String"
          },
          {
            "name": "@param",
            "body": "style {String}\n  The style to format the cell with if the condition matches.",
            "paramName": "style",
            "description": "\n  The style to format the cell with if the condition matches.",
            "type": "qx.ui.progressive.renderer.table.cell.String"
          },
          {
            "name": "@param",
            "body": "weight {String}\n  The weight to format the cell with if the condition matches.",
            "paramName": "weight",
            "description": "\n  The weight to format the cell with if the condition matches.",
            "type": "qx.ui.progressive.renderer.table.cell.String"
          },
          {
            "name": "@param",
            "body": "target {String}\n  The text value of the column to compare against. If this is null,\n  comparisons will be against the contents of this cell.",
            "paramName": "target",
            "description": "\n  The text value of the column to compare against. If this is null,\n  comparisons will be against the contents of this cell.",
            "type": "qx.ui.progressive.renderer.table.cell.String"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the condition can not recognized or one of the\nvalues is null.",
            "type": "Error",
            "description": " If the condition can not recognized or one of the\nvalues is null."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addRegex": {
      "location": {
        "start": {
          "line": 270,
          "column": 4
        },
        "end": {
          "line": 287,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The addRegex method is used to add a regular expression condition to\nthe cell renderer.\n\nNote: Passing null is different from passing an empty string in the\nalign, color, style and weight arguments. Null will allow pre-existing\nformatting to pass through, where an empty string will clear it back to\nthe default formatting set in the constructor."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "regex {String}\n  The regular expression to match against.",
            "paramName": "regex",
            "description": "\n  The regular expression to match against.",
            "type": "qx.ui.progressive.renderer.table.cell.String"
          },
          {
            "name": "@param",
            "body": "align {String}\n  The alignment to format the cell with if the condition matches.",
            "paramName": "align",
            "description": "\n  The alignment to format the cell with if the condition matches.",
            "type": "qx.ui.progressive.renderer.table.cell.String"
          },
          {
            "name": "@param",
            "body": "color {String}\n  The color to format the cell with if the condition matches.",
            "paramName": "color",
            "description": "\n  The color to format the cell with if the condition matches.",
            "type": "qx.ui.progressive.renderer.table.cell.String"
          },
          {
            "name": "@param",
            "body": "style {String}\n  The style to format the cell with if the condition matches.",
            "paramName": "style",
            "description": "\n  The style to format the cell with if the condition matches.",
            "type": "qx.ui.progressive.renderer.table.cell.String"
          },
          {
            "name": "@param",
            "body": "weight {String}\n  The weight to format the cell with if the condition matches.",
            "paramName": "weight",
            "description": "\n  The weight to format the cell with if the condition matches.",
            "type": "qx.ui.progressive.renderer.table.cell.String"
          },
          {
            "name": "@param",
            "body": "target {String}\n  The text value of the column to compare against. If this is null,\n  comparisons will be against the contents of this cell.",
            "paramName": "target",
            "description": "\n  The text value of the column to compare against. If this is null,\n  comparisons will be against the contents of this cell.",
            "type": "qx.ui.progressive.renderer.table.cell.String"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the regex is null.",
            "type": "Error",
            "description": " If the regex is null."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getCellStyle": {
      "location": {
        "start": {
          "line": 303,
          "column": 4
        },
        "end": {
          "line": 454,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Overridden; called whenever the cell updates. The cell will iterate\nthrough each available condition and apply formatting for those that\nmatch. Multiple conditions can match, but later conditions will\noverride earlier ones. Conditions with null values will stack with\nother conditions that apply to that value."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cellInfo {Map}\n  The information about the cell.  See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.",
            "paramName": "cellInfo",
            "description": "\n  The information about the cell.  See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}",
            "type": "qx.ui.progressive.renderer.table.cell.String",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.progressive.renderer.table.cell.Abstract",
      "appearsIn": [
        "qx.ui.progressive.renderer.table.cell.Abstract"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.progressive.renderer.table.cell.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.progressive.renderer.table.cell.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.progressive.renderer.table.cell.Abstract",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.progressive.renderer.table.cell.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.progressive.renderer.table.cell.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.progressive.renderer.table.cell.Abstract",
      "property": "reset"
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 457,
        "column": 13
      },
      "end": {
        "line": 459,
        "column": 3
      }
    }
  },
  "descendants": []
}